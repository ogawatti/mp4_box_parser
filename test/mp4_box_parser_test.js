const expect = require('chai').expect
const Mp4BoxParser = require('../index.js')
const path = require('path')

describe('Mp4BoxParser', () => {
  let mp4path = path.join(__dirname, 'test.mp4')

  describe('parse()', () => {
    it ('return object', () => {
      let result = Mp4BoxParser.parse(mp4path)
      expect(result).to.be.an('object')

      expect(result.ftyp).to.be.an('object')
      expect(result.ftyp.size).to.be.a('number')
      expect(result.ftyp.type).to.equal('ftyp')
      expect(result.ftyp.majorBrand).to.be.a('string')
      expect(result.ftyp.minorVersion).to.be.a('number')
      expect(result.ftyp.compatibleBrands).to.be.an('array')

      expect(result.moov)
      expect(result.moov).to.be.an('object')
      expect(result.moov.size).to.be.a('number')
      expect(result.moov.type).to.equal('moov')

      expect(result.moov.mvhd).to.be.an('object')
      expect(result.moov.mvhd.size).to.be.a('number')
      expect(result.moov.mvhd.type).to.equal('mvhd')
      expect(result.moov.mvhd.version).to.be.a('number')
      expect(result.moov.mvhd.flag).to.be.a('number')
      expect(result.moov.mvhd.creationTime).not.to.be.an('undefined')
      expect(result.moov.mvhd.modificationTime).not.to.be.an('undefined')
      expect(result.moov.mvhd.timescale).not.to.be.an('undefined')
      expect(result.moov.mvhd.duration).not.to.be.an('undefined')
      expect(result.moov.mvhd.nextTrackID).not.to.be.an('undefined')

      expect(result.moov.trak).to.be.an('array')
      expect(result.moov.trak[0]).to.be.an('object')
      expect(result.moov.trak[0].size).to.be.a('number')
      expect(result.moov.trak[0].type).to.equal('trak')

      expect(result.moov.trak[0].tkhd).to.be.an('object')
      expect(result.moov.trak[0].tkhd.size).to.be.a('number')
      expect(result.moov.trak[0].tkhd.type).to.equal('tkhd')
      expect(result.moov.trak[0].tkhd.version).to.be.a('number')
      expect(result.moov.trak[0].tkhd.flag).to.be.a('number')
      expect(result.moov.trak[0].tkhd.creationTime).not.to.be.an('undefined')
      expect(result.moov.trak[0].tkhd.modificationTime).not.to.be.an('undefined')
      expect(result.moov.trak[0].tkhd.trackID).to.be.an('number')
      expect(result.moov.trak[0].tkhd.duration).to.be.an('number')
      expect(result.moov.trak[0].tkhd.layer).to.be.an('number')
      expect(result.moov.trak[0].tkhd.alternateGroup).to.be.an('number')
      expect(result.moov.trak[0].tkhd.volume).to.be.an('number')
      expect(result.moov.trak[0].tkhd.width).to.be.an('number')
      expect(result.moov.trak[0].tkhd.height).to.be.an('number')

      expect(result.moov.trak[0].edts).to.be.an('object')
      expect(result.moov.trak[0].edts.size).to.be.a('number')
      expect(result.moov.trak[0].edts.type).to.equal('edts')

      expect(result.moov.trak[0].edts.elst).to.be.an('object')
      expect(result.moov.trak[0].edts.elst.size).to.be.a('number')
      expect(result.moov.trak[0].edts.elst.type).to.equal('elst')
      expect(result.moov.trak[0].edts.elst.version).to.be.a('number')
      expect(result.moov.trak[0].edts.elst.flag).to.be.a('number')
      expect(result.moov.trak[0].edts.elst.entryCount).to.be.a('number')
      //expect(result.moov.trak[0].edts.elst.entry).to.be.an('array')
      //expect(result.moov.trak[0].edts.elst.entry.length).to.equal(result.moov.trak[0].edts.elst.entryCount)

      expect(result.moov.trak[0].mdia).to.be.an('object')
      expect(result.moov.trak[0].mdia.size).to.be.a('number')
      expect(result.moov.trak[0].mdia.type).to.equal('mdia')

      expect(result.moov.trak[0].mdia.mdhd).to.be.an('object')
      expect(result.moov.trak[0].mdia.mdhd.size).to.be.a('number')
      expect(result.moov.trak[0].mdia.mdhd.type).to.equal('mdhd')
      expect(result.moov.trak[0].mdia.mdhd.version).to.be.a('number')
      expect(result.moov.trak[0].mdia.mdhd.flag).to.be.a('number')
      expect(result.moov.trak[0].mdia.mdhd.timestamp).to.be.a('number')
      expect(result.moov.trak[0].mdia.mdhd.timescale).to.be.a('number')
      expect(result.moov.trak[0].mdia.mdhd.duration).to.be.a('number')

      expect(result.moov.trak[0].mdia.hdlr).to.be.an('object')
      expect(result.moov.trak[0].mdia.hdlr.size).to.be.a('number')
      expect(result.moov.trak[0].mdia.hdlr.type).to.equal('hdlr')
      expect(result.moov.trak[0].mdia.hdlr.version).to.be.a('number')
      expect(result.moov.trak[0].mdia.hdlr.flag).to.be.a('number')
      expect(result.moov.trak[0].mdia.hdlr.handlerType).to.be.a('string')
      expect(result.moov.trak[0].mdia.hdlr.name).to.be.a('string')

      expect(result.moov.trak[0].mdia.minf).to.be.an('object')
      expect(result.moov.trak[0].mdia.minf.size).to.be.a('number')
      expect(result.moov.trak[0].mdia.minf.type).to.equal('minf')

      expect(result.moov.udta).to.be.an('object')
      expect(result.moov.udta.size).to.be.a('number')
      expect(result.moov.udta.type).to.equal('udta')

      expect(result.moov.udta).to.be.an('object')
      expect(result.moov.udta.size).to.be.a('number')
      expect(result.moov.udta.type).to.equal('udta')
    })
  })
})
